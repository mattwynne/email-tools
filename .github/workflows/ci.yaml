name: CI/CD pipeline
on:
  push:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
            download-buffer-size = 500000000

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/*.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - uses: cachix/cachix-action@v14
        with:
          name: devenv

      - name: Install devenv.sh
        run: nix profile install nixpkgs#devenv

      - name: Cache Elixir dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            email_tools/deps
            email_tools/_build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - run: devenv test
        env:
          FASTMAIL_USERNAME: ${{ secrets.FASTMAIL_USERNAME }}
          FASTMAIL_API_TOKEN: ${{ secrets.FASTMAIL_API_TOKEN }}
          FASTMAIL_DAV_PASSWORD: ${{ secrets.FASTMAIL_DAV_PASSWORD }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:

      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Cache Elixir dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            email_tools/deps
            email_tools/_build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - run: flyctl deploy --remote-only email_tools
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

